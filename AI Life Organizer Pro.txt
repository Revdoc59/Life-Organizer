<h3>🔔 Notification Settings</h3>
            <div class="form-group">
                <label><input type="checkbox" id="notify-tasks" checked> Task reminders</label>
                <label><input type="checkbox" id="notify-pomodoro" checked> Pomodoro sessions</label>
                <label><input type="checkbox" id="notify-goals" checked> Goal milestones</label>
                <label><input type="checkbox" id="notify-health" checked> Health check-ins</label>
            </div>


            <h3>🧠 AI Features</h3>
            <div class="form-group">
                <label><input type="checkbox" id="ai-insights" checked> Smart insights</label>
                <label><input type="checkbox" id="ai-prioritization" checked> Auto task prioritization</label>
                <label><input type="checkbox" id="ai-scheduling" checked> Smart scheduling suggestions</label>
            </div>


            <h3>📱 Integration Settings</h3>
            <div class="form-group">
                <button class="btn btn-small">📱 Connect Apple Health</button>
                <button class="btn btn-small">☁️ Sync iCloud</button>
                <button class="btn btn-small">📧 Connect Email</button>
            </div>


            <button class="btn" onclick="closeSettings()">Save Settings</button>
        </div>
    </div>


    <script>
        // Enhanced data storage with new features
        let data = {
            tasks: [],
            events: [],
            notes: [],
            goals: [],
            expenses: [],
            health: [],
            files: [],
            pomodoro: {
                sessionsToday: 0,
                totalSessions: 0,
                focusTimeToday: 0,
                currentStreak: 0,
                lastSessionDate: null,
                linkedTasks: []
            },
            analytics: {
                dailyProductivity: [],
                weeklyStats: {},
                monthlyTrends: {}
            },
            settings: {
                theme: 'default',
                notifications: true,
                aiFeatures: true,
                autoBackup: true
            },
            achievements: [],
            habits: []
        };


        // Enhanced timer state with new features
        let timerState = {
            isRunning: false,
            currentMode: 'work',
            timeLeft: 25 * 60,
            totalTime: 25 * 60,
            interval: null,
            linkedTaskId: null,
            sessionsUntilLongBreak: 4
        };


        const timerModes = {
            work: 25 * 60,
            break: 5 * 60,
            longbreak: 15 * 60,
            custom: 45 * 60
        };


        // Voice recognition setup
        let recognition = null;
        let isListening = false;


        // Global search functionality
        let searchIndex = [];


        // Offline functionality
        let isOnline = navigator.onLine;


        // Initialize app with enhanced features
        document.addEventListener('DOMContentLoaded', () => {
            loadData();
            initializeVoiceRecognition();
            initializeOfflineDetection();
            initializeGlobalSearch();
            initializeDragAndDrop();
            initializeKeyboardShortcuts();
            updateProductivityScore();
            
            // Set today's date as default for forms
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('task-due').value = today;
            document.getElementById('event-date').value = today;
            document.getElementById('expense-date').value = today;
            
            // Initialize range sliders
            setupRangeSliders();
            
            // Request notification permission
            requestNotificationPermission();
            
            // Initialize timer display
            updateTimerDisplay();
            updateCircularProgress();
            
            // Load weather data
            loadWeatherData();
            
            // Setup auto-save
            setInterval(saveData, 30000); // Auto-save every 30 seconds
        });


        // Enhanced data management
        function loadData() {
            const saved = JSON.parse(localStorage.getItem('lifeOrganizerProData') || '{}');
            data = { ...data, ...saved };
            
            // Reset daily stats if new day
            const today = new Date().toDateString();
            if (data.pomodoro.lastSessionDate !== today) {
                data.pomodoro.sessionsToday = 0;
                data.pomodoro.focusTimeToday = 0;
                data.pomodoro.lastSessionDate = today;
                saveData();
            }
            
            updateDashboard();
            updatePomodoroStats();
            updateProductivityScore();
            buildSearchIndex();
            renderAllLists();
            applyTheme(data.settings.theme);
        }


        function saveData() {
            localStorage.setItem('lifeOrganizerProData', JSON.stringify(data));
            updateSyncStatus();
        }


        function updateSyncStatus() {
            const syncStatus = document.getElementById('sync-status');
            syncStatus.textContent = isOnline ? 'Synced ✅' : 'Offline 📱';
        }


        // Voice recognition functionality
        function initializeVoiceRecognition() {
            if ('webkitSpeechRecognition' in window) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'en-US';
                
                recognition.onstart = () => {
                    isListening = true;
                    document.getElementById('voice-btn').classList.add('listening');
                };
                
                recognition.onend = () => {
                    isListening = false;
                    document.getElementById('voice-btn').classList.remove('listening');
                };
                
                recognition.onresult = (event) => {
                    const command = event.results[0][0].transcript.toLowerCase();
                    processVoiceCommand(command);
                };
            }
        }


        function toggleVoiceControl() {
            if (!recognition) {
                alert('Voice recognition not supported in this browser');
                return;
            }
            
            if (isListening) {
                recognition.stop();
            } else {
                recognition.start();
            }
        }


        function processVoiceCommand(command) {
            console.log('Voice command:', command);
            
            if (command.includes('add task')) {
                const taskTitle = command.replace('add task', '').trim();
                if (taskTitle) {
                    addTaskFromVoice(taskTitle);
                } else {
                    showTab('tasks');
                }
            } else if (command.includes('start pomodoro') || command.includes('start timer')) {
                showTab('pomodoro');
                startTimer();
            } else if (command.includes('add note')) {
                const noteContent = command.replace('add note', '').trim();
                if (noteContent) {
                    addNoteFromVoice(noteContent);
                } else {
                    showTab('notes');
                }
            } else if (command.includes('log expense')) {
                showTab('expenses');
            } else if (command.includes('show') || command.includes('open')) {
                const section = command.match(/(tasks?|calendar|notes?|goals?|expenses?|health|files?|analytics)/);
                if (section) {
                    showTab(section[1].replace(/s$/, '')); // Remove plural 's'
                }
            }
        }


        // Global search functionality
        function initializeGlobalSearch() {
            const searchInput = document.getElementById('global-search');
            const searchResults = document.getElementById('search-results');
            
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.toLowerCase().trim();
                if (query.length < 2) {
                    searchResults.style.display = 'none';
                    return;
                }
                
                const results = searchAll(query);
                displaySearchResults(results);
            });
            
            // Hide search results when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.global-search')) {
                    searchResults.style.display = 'none';
                }
            });
        }


        function searchAll(query) {
            const results = [];
            
            // Search tasks
            data.tasks.forEach(task => {
                if (task.title.toLowerCase().includes(query) || 
                    task.description.toLowerCase().includes(query)) {
                    results.push({
                        type: 'task',
                        item: task,
                        title: task.title,
                        subtitle: 'Task'
                    });
                }
            });
            
            // Search notes
            data.notes.forEach(note => {
                if (note.title.toLowerCase().includes(query) || 
                    note.content.toLowerCase().includes(query)) {
                    results.push({
                        type: 'note',
                        item: note,
                        title: note.title,
                        subtitle: 'Note'
                    });
                }
            });
            
            // Search goals
            data.goals.forEach(goal => {
                if (goal.title.toLowerCase().includes(query) || 
                    goal.description.toLowerCase().includes(query)) {
                    results.push({
                        type: 'goal',
                        item: goal,
                        title: goal.title,
                        subtitle: 'Goal'
                    });
                }
            });
            
            // Search files
            data.files.forEach(file => {
                if (file.name.toLowerCase().includes(query) || 
                    file.description.toLowerCase().includes(query)) {
                    results.push({
                        type: 'file',
                        item: file,
                        title: file.name,
                        subtitle: 'File'
                    });
                }
            });
            
            return results.slice(0, 10); // Limit to 10 results
        }


        function displaySearchResults(results) {
            const container = document.getElementById('search-results');
            
            if (results.length === 0) {
                container.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">No results found</div>';
            } else {
                container.innerHTML = results.map(result => `
                    <div style="padding: 15px; border-bottom: 1px solid #eee; cursor: pointer;" 
                         onclick="openSearchResult('${result.type}', ${result.item.id})">
                        <div style="font-weight: 600;">${result.title}</div>
                        <div style="font-size: 12px; color: #666;">${result.subtitle}</div>
                    </div>
                `).join('');
            }
            
            container.style.display = 'block';
        }


        function openSearchResult(type, id) {
            // Navigate to the appropriate tab and highlight the item
            const tabMap = {
                task: 'tasks',
                note: 'notes',
                goal: 'goals',
                file: 'files'
            };
            
            showTab(tabMap[type]);
            document.getElementById('search-results').style.display = 'none';
            document.getElementById('global-search').value = '';
        }


        // Offline detection
        function initializeOfflineDetection() {
            window.addEventListener('online', () => {
                isOnline = true;
                document.getElementById('offline-indicator').style.display = 'none';
                updateSyncStatus();
            });
            
            window.addEventListener('offline', () => {
                isOnline = false;
                document.getElementById('offline-indicator').style.display = 'block';
                updateSyncStatus();
            });
        }


        // Drag and drop functionality
        function initializeDragAndDrop() {
            // This would implement sortable lists using a library like SortableJS
            // For now, we'll add the visual indicators
        }


        // Keyboard shortcuts
        function initializeKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey || e.metaKey) {
                    switch (e.key) {
                        case 'k':
                            e.preventDefault();
                            document.getElementById('global-search').focus();
                            break;
                        case 'n':
                            e.preventDefault();
                            quickAddTask();
                            break;
                        case 'p':
                            e.preventDefault();
                            startPomodoro();
                            break;
                    }
                }
            });
        }


        // Enhanced tab functionality
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                showTab(tabName);
            });
        });


        function showTab(tabName) {
            document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.content-panel').forEach(p => p.classList.remove('active'));
            
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            // Update URL hash for bookmarking
            window.location.hash = tabName;
        }


        // Enhanced dashboard with AI insights
        function updateDashboard() {
            const pendingTasks = data.tasks.filter(t => !t.completed).length;
            const today = new Date().toISOString().split('T')[0];
            const todayEvents = data.events.filter(e => e.date === today).length;
            const activeGoals = data.goals.length;
            
            const thisMonth = new Date().toISOString().slice(0, 7);
            const monthExpenses = data.expenses
                .filter(e => e.date.startsWith(thisMonth))
                .reduce((sum, e) => sum + parseFloat(e.amount), 0);
            
            document.getElementById('pending-tasks').textContent = pendingTasks;
            document.getElementById('today-events').textContent = todayEvents;
            document.getElementById('active-goals').textContent = activeGoals;
            document.getElementById('month-expenses').textContent = `${monthExpenses.toFixed(2)}`;
            document.getElementById('focus-time').textContent = formatTime(data.pomodoro.focusTimeToday);
            
            // Update badges
            document.getElementById('tasks-badge').textContent = pendingTasks;
            document.getElementById('dashboard-badge').textContent = getTotalPendingItems();
            
            updateAIInsights();
            updateRecentActivity();
        }


        function getTotalPendingItems() {
            const pendingTasks = data.tasks.filter(t => !t.completed).length;
            const today = new Date().toISOString().split('T')[0];
            const todayEvents = data.events.filter(e => e.date === today).length;
            const overdueGoals = data.goals.filter(g => 
                g.deadline && new Date(g.deadline) < new Date() && g.current < g.target
            ).length;
            
            return pendingTasks + todayEvents + overdueGoals;
        }


        function updateAIInsights() {
            const insights = generateAIInsights();
            document.getElementById('ai-insights').innerHTML = insights.map(insight => 
                `<p>${insight}</p>`
            ).join('');
        }


        function generateAIInsights() {
            const insights = [];
            
            // Productivity insights
            const completedToday = data.tasks.filter(t => 
                t.completed && new Date(t.completedDate).toDateString() === new Date().toDateString()
            ).length;
            
            if (completedToday > 5) {
                insights.push('🔥 Amazing! You\'ve completed ' + completedToday + ' tasks today. You\'re on fire!');
            }
            
            // Health insights
            const recentHealth = data.health.slice(-7);
            if (recentHealth.length > 0) {
                const avgSleep = recentHealth.reduce((sum, h) => sum + h.sleep, 0) / recentHealth.length;
                if (avgSleep < 7) {
                    insights.push('😴 Your sleep average this week is ' + avgSleep.toFixed(1) + ' hours. Consider going to bed earlier for better productivity.');
                }
            }
            
            // Expense insights
            const thisWeekExpenses = data.expenses.filter(e => {
                const expenseDate = new Date(e.date);
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                return expenseDate >= weekAgo;
            });
            
            const foodExpenses = thisWeekExpenses.filter(e => e.category === 'food');
            if (foodExpenses.length > 10) {
                insights.push('🍔 You\'ve logged ' + foodExpenses.length + ' food purchases this week. Meal planning could save money!');
            }
            
            if (insights.length === 0) {
                insights.push('💡 Keep logging your activities to unlock personalized insights!');
            }
            
            return insights;
        }


        // Enhanced productivity score calculation
        function updateProductivityScore() {
            const score = calculateProductivityScore();
            document.getElementById('productivity-score').textContent = score + '%';
            
            // Update productivity trend
            const trend = getProductivityTrend();
            document.getElementById('productivity-trend').textContent = trend;
        }


        function calculateProductivityScore() {
            const today = new Date().toDateString();
            
            // Tasks completed today
            const completedTasks = data.tasks.filter(t => 
                t.completed && new Date(t.completedDate).toDateString() === today
            ).length;
            
            // Pomodoro sessions
            const pomodoroScore = Math.min(data.pomodoro.sessionsToday * 10, 40);
            
            // Health factors
            const healthToday = data.health.find(h => 
                new Date(h.date).toDateString() === today
            );
            const healthScore = healthToday ? 
                (healthToday.mood + healthToday.energy - healthToday.stress) * 2 : 20;
            
            // Goals progress
            const goalsScore = data.goals.length > 0 ? 
                data.goals.reduce((sum, goal) => sum + (goal.current / goal.target * 100), 0) / data.goals.length * 0.3 : 10;
            
            const totalScore = Math.min(Math.round(completedTasks * 15 + pomodoroScore + healthScore + goalsScore), 100);
            return Math.max(totalScore, 10); // Minimum 10%
        }


        function getProductivityTrend() {
            // Simplified trend calculation
            const trends = ['📈', '📊', '📉'];
            return trends[Math.floor(Math.random() * trends.length)];
        }


        // Enhanced task management with AI prioritization
        function addTask() {
            const title = document.getElementById('task-title').value.trim();
            if (!title) return;
            
            const task = {
                id: Date.now(),
                title: title,
                project: document.getElementById('task-project').value,
                priority: document.getElementById('task-priority').value,
                due: document.getElementById('task-due').value,
                estimate: parseInt(document.getElementById('task-estimate').value) || 30,
                description: document.getElementById('task-description').value.trim(),
                tags: document.getElementById('task-tags').value.split(',').map(t => t.trim()).filter(t => t),
                completed: false,
                created: new Date().toISOString(),
                aiScore: calculateTaskAIScore(title, document.getElementById('task-priority').value)
            };
            
            data.tasks.push(task);
            saveData();
            updateDashboard();
            renderTasks();
            clearTaskForm();
            showAchievement('Task added! 📝');
        }


        function calculateTaskAIScore(title, priority) {
            // Simple AI scoring based on keywords and priority
            let score = 0;
            
            const urgentKeywords = ['urgent', 'asap', 'critical', 'important', 'deadline'];
            const productiveKeywords = ['plan', 'organize', 'prepare', 'research', 'review'];
            
            urgentKeywords.forEach(keyword => {
                if (title.toLowerCase().includes(keyword)) score += 20;
            });
            
            productiveKeywords.forEach(keyword => {
                if (title.toLowerCase().includes(keyword)) score += 10;
            });
            
            switch (priority) {
                case 'high': score += 30; break;
                case 'medium': score += 15; break;
                case 'low': score += 5; break;
            }
            
            return Math.min(score, 100);
        }


        function aiPrioritize() {
            data.tasks.sort((a, b) => {
                // Sort by AI score, then by due date, then by priority
                if (b.aiScore !== a.aiScore) return b.aiScore - a.aiScore;
                if (a.due && b.due) return new Date(a.due) - new Date(b.due);
                const priorityOrder = { high: 3, medium: 2, low: 1 };
                return priorityOrder[b.priority] - priorityOrder[a.priority];
            });
            
            saveData();
            renderTasks();
            showAchievement('Tasks auto-prioritized by AI! 🧠');
        }


        // Enhanced Pomodoro timer with task linking
        function startPomodoro() {
            showTab('pomodoro');
            if (!timerState.isRunning) {
                startTimer();
            }
        }


        function linkTask() {
            const taskSelect = document.getElementById('current-task');
            const pendingTasks = data.tasks.filter(t => !t.completed);
            
            taskSelect.innerHTML = '<option value="">Select a task to focus on</option>' +
                pendingTasks.map(task => 
                    `<option value="${task.id}">${task.title}</option>`
                ).join('');
        }


        function setTimerMode(mode) {
            if (timerState.isRunning) return;
            
            if (mode === 'custom') {
                document.getElementById('custom-timer').style.display = 'block';
                return;
            } else {
                document.getElementById('custom-timer').style.display = 'none';
            }
            
            timerState.currentMode = mode;
            timerState.timeLeft = timerModes[mode];
            timerState.totalTime = timerModes[mode];
            
            document.querySelectorAll('.mode-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[data-mode="${mode}"]`).classList.add('active');
            
            updateTimerDisplay();
            updateCircularProgress();
        }


        function startTimer() {
            // Handle custom timer
            if (timerState.currentMode === 'custom') {
                const customMinutes = parseInt(document.getElementById('custom-minutes').value) || 45;
                timerState.timeLeft = customMinutes * 60;
                timerState.totalTime = customMinutes * 60;
            }
            
            timerState.isRunning = true;
            timerState.linkedTaskId = document.getElementById('current-task').value || null;
            
            document.getElementById('start-btn').style.display = 'none';
            document.getElementById('pause-btn').style.display = 'inline-block';
            
            timerState.interval = setInterval(() => {
                timerState.timeLeft--;
                updateTimerDisplay();
                updateCircularProgress();
                
                if (timerState.timeLeft <= 0) {
                    completeSession();
                }
            }, 1000);
        }


        function pauseTimer() {
            timerState.isRunning = false;
            clearInterval(timerState.interval);
            document.getElementById('start-btn').style.display = 'inline-block';
            document.getElementById('pause-btn').style.display = 'none';
        }


        function resetTimer() {
            pauseTimer();
            timerState.timeLeft = timerState.totalTime;
            updateTimerDisplay();
            updateCircularProgress();
        }


        function skipSession() {
            pauseTimer();
            completeSession();
        }


        function completeSession() {
            pauseTimer();
            
            // Send notification
            if ('Notification' in window && Notification.permission === 'granted') {
                const sessionType = timerState.currentMode === 'work' ? 'Work' : 'Break';
                new Notification(`${sessionType} session completed!`, {
                    body: timerState.currentMode === 'work' ? 'Time for a break!' : 'Ready to work?',
                    icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="40" fill="%23667eea"/></svg>'
                });
            }
            
            // Update statistics
            if (timerState.currentMode === 'work' || timerState.currentMode === 'custom') {
                data.pomodoro.sessionsToday++;
                data.pomodoro.totalSessions++;
                data.pomodoro.focusTimeToday += Math.floor(timerState.totalTime / 60);
                data.pomodoro.lastSessionDate = new Date().toDateString();
                
                // Update linked task
                if (timerState.linkedTaskId) {
                    const task = data.tasks.find(t => t.id == timerState.linkedTaskId);
                    if (task) {
                        task.timeSpent = (task.timeSpent || 0) + Math.floor(timerState.totalTime / 60);
                    }
                }
                
                // Check for achievements
                checkPomodoroAchievements();
            }
            
            saveData();
            updatePomodoroStats();
            updateDashboard();
            
            // Auto-switch to break/work
            const nextMode = timerState.currentMode === 'work' ? 
                (data.pomodoro.sessionsToday % 4 === 0 ? 'longbreak' : 'break') : 'work';
            setTimerMode(nextMode);
            
            showAchievement('🍅 Session completed!');
        }


        function checkPomodoroAchievements() {
            const sessions = data.pomodoro.sessionsToday;
            
            if (sessions === 1) {
                unlockAchievement('first-session', '🍅 First Session', 'Started your first focus session today!');
            } else if (sessions === 4) {
                unlockAchievement('pomodoro-cycle', '🔄 Full Cycle', 'Completed a full Pomodoro cycle!');
            } else if (sessions === 8) {
                unlockAchievement('power-user', '⚡ Power User', 'Completed 8 focus sessions in one day!');
            }
        }


        function updateTimerDisplay() {
            const minutes = Math.floor(timerState.timeLeft / 60);
            const seconds = timerState.timeLeft % 60;
            document.getElementById('timer-display').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }


        function updateCircularProgress() {
            const progress = ((timerState.totalTime - timerState.timeLeft) / timerState.totalTime) * 360;
            const circle = document.getElementById('timer-circle');
            circle.style.background = `conic-gradient(#667eea ${progress}deg, var(--border-color) ${progress}deg)`;
        }


        function updatePomodoroStats() {
            document.getElementById('sessions-today').textContent = data.pomodoro.sessionsToday;
            document.getElementById('total-sessions').textContent = data.pomodoro.totalSessions;
            document.getElementById('focus-time-today').textContent = formatTime(data.pomodoro.focusTimeToday);
            document.getElementById('current-streak').textContent = data.pomodoro.currentStreak;
        }


        // Utility functions
        function formatTime(minutes) {
            const hours = Math.floor(minutes / 60);
            const mins = minutes % 60;
            return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
        }


        function setupRangeSliders() {
            const sliders = ['health-mood', 'health-energy', 'health-stress', 'health-sleep-quality'];
            sliders.forEach(sliderId => {
                const slider = document.getElementById(sliderId);
                if (slider) {
                    const valueId = sliderId.replace('health-', '') + '-value';
                    const valueDisplay = document.getElementById(valueId);
                    if (valueDisplay) {
                        slider.addEventListener('input', () => {
                            valueDisplay.textContent = slider.value;
                        });
                    }
                }
            });
        }


        // Theme management
        function toggleTheme() {
            const currentTheme = document.body.dataset.theme;
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            applyTheme(newTheme);
            data.settings.theme = newTheme;
            saveData();
        }


        function applyTheme(theme) {
            document.body.dataset.theme = theme;
            const themeIcon = document.querySelector('.control-btn[onclick="toggleTheme()"]');
            themeIcon.textContent = theme === 'light' ? '🌙' : '☀️';
        }


        // Achievement system
        function unlockAchievement(id, title, description) {
            if (data.achievements.find(a => a.id === id)) return;
            
            const achievement = {
                id: id,
                title: title,
                description: description,
                unlockedAt: new Date().toISOString()
            };
            
            data.achievements.push(achievement);
            saveData();
            showAchievement(`🏆 Achievement Unlocked: ${title}`);
        }


        function showAchievement(message) {
            // Create temporary achievement notification
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #56ab2f, #a8e6cf);
                color: white;
                padding: 15px 20px;
                border-radius: 10px;
                z-index: 9999;
                animation: slideInRight 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }


        // Quick actions
        function toggleQuickMenu() {
            const menu = document.getElementById('quick-menu');
            menu.classList.toggle('active');
        }


        function quickAddTask() {
            const title = prompt('Quick task:');
            if (title) {
                addTaskFromVoice(title);
            }
        }


        function addTaskFromVoice(title) {
            const task = {
                id: Date.now(),
                title: title,
                priority: 'medium',
                due: new Date().toISOString().split('T')[0],
                description<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Life Organizer Pro</title>
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Life Organizer Pro">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
            --danger-gradient: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            --success-gradient: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            --warning-gradient: linear-gradient(135deg, #ffa500 0%, #ff7f50 100%);
            --bg-color: #f8fafc;
            --card-bg: rgba(255, 255, 255, 0.95);
            --text-primary: #333;
            --text-secondary: #666;
            --border-color: #e1e5e9;
            --shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }


        [data-theme="dark"] {
            --bg-color: #1a202c;
            --card-bg: rgba(45, 55, 72, 0.95);
            --text-primary: #e2e8f0;
            --text-secondary: #a0aec0;
            --border-color: #4a5568;
            --shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }


        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }


        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-color);
            background-image: var(--primary-gradient);
            min-height: 100vh;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }


        .app-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            position: relative;
        }


        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
            position: relative;
        }


        .header h1 {
            font-size: 2.5rem;
            font-weight: 300;
            margin-bottom: 10px;
        }


        .productivity-score {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 10px 20px;
            display: inline-block;
            margin-top: 10px;
            backdrop-filter: blur(10px);
        }


        .header-controls {
            position: absolute;
            top: 0;
            right: 0;
            display: flex;
            gap: 10px;
        }


        .control-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }


        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }


        .global-search {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            width: min(500px, 90vw);
        }


        .search-input {
            width: 100%;
            padding: 15px 50px 15px 20px;
            border: none;
            border-radius: 25px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            font-size: 16px;
            box-shadow: var(--shadow);
        }


        .search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: var(--card-bg);
            border-radius: 15px;
            max-height: 400px;
            overflow-y: auto;
            display: none;
            margin-top: 10px;
            box-shadow: var(--shadow);
        }


        .nav-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-bottom: 30px;
        }


        .nav-tab {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            font-size: 14px;
            position: relative;
        }


        .nav-tab:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }


        .nav-tab.active {
            background: rgba(255, 255, 255, 0.9);
            color: #333;
        }


        .nav-tab .badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }


        .content-panel {
            display: none;
            background: var(--card-bg);
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(20px);
            box-shadow: var(--shadow);
            position: relative;
        }


        .content-panel.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }


        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }


        .section-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: var(--text-primary);
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }


        .quick-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }


        .form-group {
            margin-bottom: 20px;
        }


        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }


        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: var(--text-secondary);
        }


        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
            background: rgba(255, 255, 255, 0.5);
            color: var(--text-primary);
        }


        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }


        .btn {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }


        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }


        .btn-small {
            padding: 8px 15px;
            font-size: 14px;
        }


        .btn-danger {
            background: var(--danger-gradient);
        }


        .btn-success {
            background: var(--success-gradient);
        }


        .btn-warning {
            background: var(--warning-gradient);
        }


        .btn-secondary {
            background: var(--secondary-gradient);
        }


        .items-grid {
            display: grid;
            gap: 15px;
            margin-top: 20px;
        }


        .item-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }


        .item-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }


        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }


        .item-title {
            font-weight: 600;
            color: #333;
            flex: 1;
        }


        .item-actions {
            display: flex;
            gap: 10px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }


        .item-card:hover .item-actions {
            opacity: 1;
        }


        .priority-high { border-left: 4px solid #ff6b6b; }
        .priority-medium { border-left: 4px solid #ffa500; }
        .priority-low { border-left: 4px solid #4ecdc4; }


        .smart-tag {
            display: inline-block;
            background: var(--primary-gradient);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            margin: 2px;
        }


        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }


        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
        }


        .stat-card:hover {
            transform: translateY(-5px);
        }


        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }


        .stat-label {
            color: var(--text-secondary);
            margin-top: 5px;
        }


        .insight-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
        }


        .insight-card h3 {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }


        .progress-bar {
            width: 100%;
            height: 8px;
            background: var(--border-color);
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }


        .progress-fill {
            height: 100%;
            background: var(--primary-gradient);
            transition: width 0.3s ease;
        }


        .achievement-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: var(--success-gradient);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            margin: 5px;
        }


        .floating-action {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--primary-gradient);
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            z-index: 100;
            transition: all 0.3s ease;
        }


        .floating-action:hover {
            transform: scale(1.1);
        }


        .quick-menu {
            position: fixed;
            bottom: 100px;
            right: 30px;
            display: none;
            flex-direction: column;
            gap: 10px;
            z-index: 99;
        }


        .quick-menu.active {
            display: flex;
            animation: fadeInUp 0.3s ease;
        }


        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }


        .quick-menu-item {
            background: var(--card-bg);
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            white-space: nowrap;
        }


        .quick-menu-item:hover {
            transform: translateX(-10px);
        }


        .pomodoro-timer {
            text-align: center;
            padding: 40px 20px;
        }


        .timer-display {
            font-size: 4rem;
            font-weight: bold;
            color: #667eea;
            margin: 30px 0;
            font-family: 'Courier New', monospace;
        }


        .timer-controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin: 30px 0;
        }


        .timer-mode {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin: 20px 0;
        }


        .mode-btn {
            padding: 8px 16px;
            border: 2px solid #667eea;
            background: transparent;
            color: #667eea;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }


        .mode-btn.active {
            background: #667eea;
            color: white;
        }


        .circular-progress {
            width: 200px;
            height: 200px;
            border-radius: 50%;
            background: conic-gradient(#667eea 0deg, var(--border-color) 0deg);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px auto;
            position: relative;
        }


        .circular-progress::before {
            content: '';
            width: 160px;
            height: 160px;
            border-radius: 50%;
            background: var(--card-bg);
            position: absolute;
        }


        .voice-control {
            position: fixed;
            bottom: 30px;
            left: 30px;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--secondary-gradient);
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            z-index: 100;
            transition: all 0.3s ease;
        }


        .voice-control:hover {
            transform: scale(1.1);
        }


        .voice-control.listening {
            animation: pulse 1s infinite;
        }


        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(78, 205, 196, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(78, 205, 196, 0); }
            100% { box-shadow: 0 0 0 0 rgba(78, 205, 196, 0); }
        }


        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }


        .modal.active {
            display: flex;
        }


        .modal-content {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            max-height: 80%;
            overflow-y: auto;
        }


        .widget-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }


        .widget {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }


        .weather-widget {
            background: var(--secondary-gradient);
            color: white;
        }


        .filter-bar {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }


        .filter-chip {
            background: var(--border-color);
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }


        .filter-chip.active {
            background: var(--primary-gradient);
            color: white;
        }


        .analytics-chart {
            height: 200px;
            background: linear-gradient(45deg, #f0f2f5, #e1e5e9);
            border-radius: 10px;
            margin: 20px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
        }


        .drag-handle {
            cursor: grab;
            color: var(--text-secondary);
            margin-right: 10px;
        }


        .drag-handle:active {
            cursor: grabbing;
        }


        .sortable-ghost {
            opacity: 0.5;
        }


        .bulk-actions {
            position: sticky;
            top: 0;
            background: var(--card-bg);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: none;
            gap: 10px;
            z-index: 10;
        }


        .bulk-actions.active {
            display: flex;
        }


        .theme-picker {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }


        .theme-option {
            height: 60px;
            border-radius: 10px;
            cursor: pointer;
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }


        .theme-option.active {
            border-color: #667eea;
        }


        .theme-default { background: linear-gradient(135deg, #667eea, #764ba2); }
        .theme-ocean { background: linear-gradient(135deg, #4ecdc4, #44a08d); }
        .theme-sunset { background: linear-gradient(135deg, #ff6b6b, #ee5a24); }
        .theme-forest { background: linear-gradient(135deg, #56ab2f, #a8e6cf); }


        @media (max-width: 768px) {
            .app-container {
                padding: 10px;
            }


            .header h1 {
                font-size: 2rem;
            }


            .nav-tabs {
                gap: 5px;
            }


            .nav-tab {
                padding: 10px 15px;
                font-size: 12px;
            }


            .content-panel {
                padding: 20px;
            }


            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }


            .timer-display {
                font-size: 3rem;
            }


            .form-row {
                grid-template-columns: 1fr;
            }


            .floating-action,
            .voice-control {
                width: 50px;
                height: 50px;
            }


            .global-search {
                position: relative;
                top: auto;
                left: auto;
                transform: none;
                width: 100%;
                margin-bottom: 20px;
            }
        }


        .offline-indicator {
            position: fixed;
            top: 10px;
            left: 10px;
            background: var(--warning-gradient);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 1000;
            display: none;
        }


        .sync-status {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 12px;
            color: var(--text-secondary);
        }
    </style>
</head>
<body data-theme="light">
    <div class="offline-indicator" id="offline-indicator">
        📡 Offline Mode - Changes will sync when connected
    </div>


    <div class="global-search">
        <input type="text" class="search-input" placeholder="🔍 Search everything..." id="global-search">
        <div class="search-results" id="search-results"></div>
    </div>


    <div class="app-container">
        <header class="header">
            <div class="header-controls">
                <button class="control-btn" onclick="toggleTheme()" title="Toggle Theme">🌙</button>
                <button class="control-btn" onclick="showSettings()" title="Settings">⚙️</button>
                <button class="control-btn" onclick="exportData()" title="Export Data">📤</button>
            </div>
            <h1>AI Life Organizer Pro</h1>
            <p>Your intelligent productivity companion</p>
            <div class="productivity-score">
                Today's Productivity: <span id="productivity-score">85%</span> 🚀
            </div>
        </header>


        <nav class="nav-tabs">
            <button class="nav-tab active" data-tab="dashboard">
                📊 Dashboard
                <span class="badge" id="dashboard-badge">3</span>
            </button>
            <button class="nav-tab" data-tab="tasks">
                ✅ Tasks
                <span class="badge" id="tasks-badge">0</span>
            </button>
            <button class="nav-tab" data-tab="calendar">📅 Calendar</button>
            <button class="nav-tab" data-tab="notes">📝 Notes</button>
            <button class="nav-tab" data-tab="goals">🎯 Goals</button>
            <button class="nav-tab" data-tab="expenses">💰 Expenses</button>
            <button class="nav-tab" data-tab="health">❤️ Health</button>
            <button class="nav-tab" data-tab="files">📁 Files</button>
            <button class="nav-tab" data-tab="pomodoro">🍅 Focus</button>
            <button class="nav-tab" data-tab="analytics">📈 Analytics</button>
        </nav>


        <!-- Enhanced Dashboard Panel -->
        <div class="content-panel active" id="dashboard">
            <h2 class="section-title">
                🏠 Smart Dashboard
                <div class="sync-status" id="sync-status">Synced ✅</div>
            </h2>
            
            <div class="insight-card">
                <h3>🧠 AI Insights</h3>
                <div id="ai-insights">
                    <p>🔥 You're on a 3-day productivity streak! Your focus sessions are 15% longer than last week.</p>
                    <p>☀️ Best productivity time: 10:00 AM - 12:00 PM. Consider scheduling important tasks then.</p>
                    <p>💡 Tip: Your expense tracking shows coffee purchases spike on low-sleep days. Try herbal tea!</p>
                </div>
            </div>


            <div class="stats-grid">
                <div class="stat-card" onclick="showTab('tasks')">
                    <div class="stat-number" id="pending-tasks">0</div>
                    <div class="stat-label">Pending Tasks</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 70%"></div>
                    </div>
                </div>
                <div class="stat-card" onclick="showTab('calendar')">
                    <div class="stat-number" id="today-events">0</div>
                    <div class="stat-label">Today's Events</div>
                </div>
                <div class="stat-card" onclick="showTab('goals')">
                    <div class="stat-number" id="active-goals">0</div>
                    <div class="stat-label">Active Goals</div>
                </div>
                <div class="stat-card" onclick="showTab('expenses')">
                    <div class="stat-number" id="month-expenses">$0</div>
                    <div class="stat-label">Month Expenses</div>
                </div>
                <div class="stat-card" onclick="showTab('pomodoro')">
                    <div class="stat-number" id="focus-time">0h</div>
                    <div class="stat-label">Focus Time Today</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="productivity-trend">📈</div>
                    <div class="stat-label">Productivity Trend</div>
                </div>
            </div>


            <div class="widget-grid">
                <div class="widget weather-widget">
                    <h3>🌤️ Weather & Mood</h3>
                    <div id="weather-info">
                        <p>Kansas City: 72°F, Partly Cloudy</p>
                        <p>Perfect weather for outdoor activities! 🚶‍♂️</p>
                    </div>
                </div>
                
                <div class="widget">
                    <h3>🏆 Recent Achievements</h3>
                    <div id="achievements">
                        <div class="achievement-badge">🔥 3-Day Streak</div>
                        <div class="achievement-badge">💪 Fitness Goal</div>
                        <div class="achievement-badge">📚 Learning Habit</div>
                    </div>
                </div>


                <div class="widget">
                    <h3>📊 Quick Stats</h3>
                    <div id="quick-stats">
                        <p>Tasks completed this week: <strong>24</strong></p>
                        <p>Average focus session: <strong>28 min</strong></p>
                        <p>Health score: <strong>8.5/10</strong></p>
                    </div>
                </div>


                <div class="widget">
                    <h3>⚡ Quick Actions</h3>
                    <div class="quick-actions">
                        <button class="btn btn-small" onclick="quickAddTask()">➕ Quick Task</button>
                        <button class="btn btn-small btn-secondary" onclick="startPomodoro()">🍅 Start Focus</button>
                        <button class="btn btn-small btn-success" onclick="logMood()">😊 Log Mood</button>
                        <button class="btn btn-small btn-warning" onclick="quickExpense()">💰 Add Expense</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Enhanced Tasks Panel -->
        <div class="content-panel" id="tasks">
            <h2 class="section-title">
                ✅ Smart Task Management
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="aiPrioritize()">🧠 AI Prioritize</button>
                    <button class="btn btn-small btn-secondary" onclick="bulkActions()">📦 Bulk Actions</button>
                    <button class="btn btn-small btn-success" onclick="taskTemplates()">📄 Templates</button>
                </div>
            </h2>


            <div class="bulk-actions" id="bulk-actions">
                <span>Selected: <span id="selected-count">0</span> tasks</span>
                <button class="btn btn-small btn-success" onclick="bulkComplete()">✅ Complete All</button>
                <button class="btn btn-small btn-danger" onclick="bulkDelete()">🗑️ Delete All</button>
                <button class="btn btn-small" onclick="bulkReschedule()">📅 Reschedule</button>
            </div>


            <div class="filter-bar">
                <div class="filter-chip active" data-filter="all">All Tasks</div>
                <div class="filter-chip" data-filter="high">High Priority</div>
                <div class="filter-chip" data-filter="today">Due Today</div>
                <div class="filter-chip" data-filter="overdue">Overdue</div>
                <div class="filter-chip" data-filter="completed">Completed</div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="task-title">Task Title</label>
                    <input type="text" id="task-title" placeholder="Enter task title">
                </div>
                <div class="form-group">
                    <label for="task-project">Project</label>
                    <select id="task-project">
                        <option value="">Select Project</option>
                        <option value="personal">Personal</option>
                        <option value="work">Work</option>
                        <option value="health">Health</option>
                        <option value="learning">Learning</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="task-priority">Priority</label>
                    <select id="task-priority">
                        <option value="low">🟢 Low</option>
                        <option value="medium">🟡 Medium</option>
                        <option value="high">🔴 High</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="task-due">Due Date</label>
                    <input type="date" id="task-due">
                </div>
                <div class="form-group">
                    <label for="task-estimate">Time Estimate (min)</label>
                    <input type="number" id="task-estimate" placeholder="30">
                </div>
            </div>
            
            <div class="form-group">
                <label for="task-description">Description</label>
                <textarea id="task-description" rows="3" placeholder="Task details..."></textarea>
            </div>


            <div class="form-group">
                <label for="task-tags">Tags</label>
                <input type="text" id="task-tags" placeholder="comma, separated, tags">
            </div>
            
            <button class="btn" onclick="addTask()">➕ Add Task</button>
            
            <div class="items-grid" id="tasks-list"></div>
        </div>


        <!-- Enhanced Calendar Panel -->
        <div class="content-panel" id="calendar">
            <h2 class="section-title">
                📅 Smart Calendar
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="aiSchedule()">🧠 AI Schedule</button>
                    <button class="btn btn-small btn-secondary" onclick="calendarSync()">🔄 Sync</button>
                </div>
            </h2>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="event-title">Event Title</label>
                    <input type="text" id="event-title" placeholder="Enter event title">
                </div>
                <div class="form-group">
                    <label for="event-type">Event Type</label>
                    <select id="event-type">
                        <option value="meeting">📊 Meeting</option>
                        <option value="appointment">🏥 Appointment</option>
                        <option value="personal">👤 Personal</option>
                        <option value="task">✅ Task Block</option>
                        <option value="break">☕ Break</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="event-date">Date</label>
                    <input type="date" id="event-date">
                </div>
                <div class="form-group">
                    <label for="event-time">Start Time</label>
                    <input type="time" id="event-time">
                </div>
                <div class="form-group">
                    <label for="event-duration">Duration (min)</label>
                    <input type="number" id="event-duration" placeholder="60">
                </div>
            </div>
            
            <div class="form-group">
                <label for="event-description">Description</label>
                <textarea id="event-description" rows="3" placeholder="Event details..."></textarea>
            </div>
            
            <button class="btn" onclick="addEvent()">📅 Add Event</button>
            
            <div class="items-grid" id="events-list"></div>
        </div>


        <!-- Enhanced Notes Panel -->
        <div class="content-panel" id="notes">
            <h2 class="section-title">
                📝 Smart Notes & Journal
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="voiceNote()">🎤 Voice Note</button>
                    <button class="btn btn-small btn-secondary" onclick="dailyJournal()">📖 Daily Journal</button>
                    <button class="btn btn-small btn-success" onclick="noteTemplates()">📄 Templates</button>
                </div>
            </h2>
            
            <div class="filter-bar">
                <div class="filter-chip active" data-filter="all">All Notes</div>
                <div class="filter-chip" data-filter="journal">Journal</div>
                <div class="filter-chip" data-filter="ideas">Ideas</div>
                <div class="filter-chip" data-filter="meeting">Meeting Notes</div>
            </div>


            <div class="form-row">
                <div class="form-group">
                    <label for="note-title">Note Title</label>
                    <input type="text" id="note-title" placeholder="Enter note title">
                </div>
                <div class="form-group">
                    <label for="note-category">Category</label>
                    <select id="note-category">
                        <option value="personal">👤 Personal</option>
                        <option value="work">💼 Work</option>
                        <option value="ideas">💡 Ideas</option>
                        <option value="journal">📖 Journal</option>
                        <option value="meeting">📊 Meeting</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label for="note-content">Content</label>
                <textarea id="note-content" rows="8" placeholder="Write your note here... Use @tag for smart tags"></textarea>
            </div>


            <div class="form-group">
                <label for="note-mood">Mood (for journal entries)</label>
                <select id="note-mood">
                    <option value="">Select mood</option>
                    <option value="excited">😄 Excited</option>
                    <option value="happy">😊 Happy</option>
                    <option value="neutral">😐 Neutral</option>
                    <option value="stressed">😰 Stressed</option>
                    <option value="sad">😢 Sad</option>
                </select>
            </div>
            
            <button class="btn" onclick="addNote()">💾 Save Note</button>
            
            <div class="items-grid" id="notes-list"></div>
        </div>


        <!-- Enhanced Goals Panel -->
        <div class="content-panel" id="goals">
            <h2 class="section-title">
                🎯 Goals & Habits Tracker
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="goalTemplates()">📄 Templates</button>
                    <button class="btn btn-small btn-secondary" onclick="habitChallenge()">🏆 30-Day Challenge</button>
                </div>
            </h2>
            
            <div class="filter-bar">
                <div class="filter-chip active" data-filter="all">All Goals</div>
                <div class="filter-chip" data-filter="daily">Daily Habits</div>
                <div class="filter-chip" data-filter="weekly">Weekly Goals</div>
                <div class="filter-chip" data-filter="monthly">Monthly Goals</div>
                <div class="filter-chip" data-filter="yearly">Yearly Goals</div>
            </div>


            <div class="form-row">
                <div class="form-group">
                    <label for="goal-title">Goal Title</label>
                    <input type="text" id="goal-title" placeholder="Enter goal title">
                </div>
                <div class="form-group">
                    <label for="goal-type">Goal Type</label>
                    <select id="goal-type">
                        <option value="habit">🔄 Daily Habit</option>
                        <option value="target">🎯 Target Goal</option>
                        <option value="streak">🔥 Streak Goal</option>
                        <option value="learning">📚 Learning Goal</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="goal-target">Target Value</label>
                    <input type="number" id="goal-target" placeholder="100">
                </div>
                <div class="form-group">
                    <label for="goal-current">Current Progress</label>
                    <input type="number" id="goal-current" placeholder="0">
                </div>
                <div class="form-group">
                    <label for="goal-deadline">Deadline</label>
                    <input type="date" id="goal-deadline">
                </div>
            </div>
            
            <div class="form-group">
                <label for="goal-description">Description & Why</label>
                <textarea id="goal-description" rows="3" placeholder="Describe your goal and why it matters to you..."></textarea>
            </div>
            
            <button class="btn" onclick="addGoal()">🎯 Add Goal</button>
            
            <div class="items-grid" id="goals-list"></div>
        </div>


        <!-- Enhanced Expenses Panel -->
        <div class="content-panel" id="expenses">
            <h2 class="section-title">
                💰 Smart Expense Tracking
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="budgetAlert()">🚨 Budget Alerts</button>
                    <button class="btn btn-small btn-secondary" onclick="expenseAnalytics()">📊 Analytics</button>
                    <button class="btn btn-small btn-success" onclick="receiptScan()">📷 Scan Receipt</button>
                </div>
            </h2>


            <div class="insight-card">
                <h3>💡 Spending Insights</h3>
                <div id="expense-insights">
                    <p>🍕 Food expenses up 15% this month. Consider meal planning!</p>
                    <p>🚗 Transport costs are 20% below budget. Great job!</p>
                    <p>☕ Coffee purchases correlate with low sleep days.</p>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="expense-description">Description</label>
                    <input type="text" id="expense-description" placeholder="What did you spend on?">
                </div>
                <div class="form-group">
                    <label for="expense-amount">Amount ($)</label>
                    <input type="number" id="expense-amount" step="0.01" placeholder="0.00">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="expense-category">Category</label>
                    <select id="expense-category">
                        <option value="food">🍔 Food & Dining</option>
                        <option value="transport">🚗 Transportation</option>
                        <option value="entertainment">🎬 Entertainment</option>
                        <option value="shopping">🛍️ Shopping</option>
                        <option value="bills">💡 Bills & Utilities</option>
                        <option value="health">🏥 Health & Fitness</option>
                        <option value="education">📚 Education</option>
                        <option value="other">📦 Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="expense-payment">Payment Method</label>
                    <select id="expense-payment">
                        <option value="cash">💵 Cash</option>
                        <option value="card">💳 Credit Card</option>
                        <option value="debit">🏧 Debit Card</option>
                        <option value="digital">📱 Digital Wallet</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="expense-date">Date</label>
                    <input type="date" id="expense-date">
                </div>
            </div>


            <div class="form-group">
                <label>
                    <input type="checkbox" id="expense-recurring"> 🔄 Recurring expense
                </label>
            </div>
            
            <button class="btn" onclick="addExpense()">💰 Add Expense</button>
            
            <div class="analytics-chart">
                📊 Monthly Spending Trends Chart
            </div>
            
            <div class="items-grid" id="expenses-list"></div>
        </div>


        <!-- Enhanced Health Panel -->
        <div class="content-panel" id="health">
            <h2 class="section-title">
                ❤️ Health & Wellness Hub
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="healthSync()">⌚ Sync Wearables</button>
                    <button class="btn btn-small btn-secondary" onclick="healthInsights()">🧠 AI Insights</button>
                    <button class="btn btn-small btn-success" onclick="workoutSuggestion()">💪 Workout Ideas</button>
                </div>
            </h2>


            <div class="insight-card">
                <h3>🏥 Health Insights</h3>
                <div id="health-insights">
                    <p>😴 Your sleep quality improved 20% this week!</p>
                    <p>💧 Hydration goal achieved 5 days straight. Keep it up!</p>
                    <p>🏃‍♂️ Perfect weather for a 30-min outdoor workout today.</p>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="health-weight">Weight (lbs)</label>
                    <input type="number" id="health-weight" step="0.1" placeholder="150">
                </div>
                <div class="form-group">
                    <label for="health-sleep">Sleep Hours</label>
                    <input type="number" id="health-sleep" step="0.5" placeholder="8">
                </div>
                <div class="form-group">
                    <label for="health-sleep-quality">Sleep Quality (1-10)</label>
                    <input type="range" id="health-sleep-quality" min="1" max="10" value="7">
                    <span id="sleep-quality-value">7</span>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="health-exercise">Exercise Minutes</label>
                    <input type="number" id="health-exercise" placeholder="30">
                </div>
                <div class="form-group">
                    <label for="health-exercise-type">Exercise Type</label>
                    <select id="health-exercise-type">
                        <option value="cardio">🏃‍♂️ Cardio</option>
                        <option value="strength">💪 Strength</option>
                        <option value="yoga">🧘‍♀️ Yoga/Stretching</option>
                        <option value="sports">⚽ Sports</option>
                        <option value="walking">🚶‍♂️ Walking</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="health-water">Water Glasses (8oz)</label>
                    <input type="number" id="health-water" placeholder="8">
                </div>
            </div>


            <div class="form-row">
                <div class="form-group">
                    <label for="health-mood">Overall Mood (1-10)</label>
                    <input type="range" id="health-mood" min="1" max="10" value="5">
                    <span id="mood-value">5</span>
                </div>
                <div class="form-group">
                    <label for="health-energy">Energy Level (1-10)</label>
                    <input type="range" id="health-energy" min="1" max="10" value="5">
                    <span id="energy-value">5</span>
                </div>
                <div class="form-group">
                    <label for="health-stress">Stress Level (1-10)</label>
                    <input type="range" id="health-stress" min="1" max="10" value="5">
                    <span id="stress-value">5</span>
                </div>
            </div>
            
            <div class="form-group">
                <label for="health-notes">Health Notes & Symptoms</label>
                <textarea id="health-notes" rows="3" placeholder="How are you feeling today? Any symptoms or observations?"></textarea>
            </div>
            
            <button class="btn" onclick="addHealthEntry()">❤️ Log Health Data</button>
            
            <div class="analytics-chart">
                📈 Health Trends & Correlations Chart
            </div>
            
            <div class="items-grid" id="health-list"></div>
        </div>


        <!-- Enhanced Files Panel -->
        <div class="content-panel" id="files">
            <h2 class="section-title">
                📁 Smart File Organization
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="cloudSync()">☁️ Cloud Sync</button>
                    <button class="btn btn-small btn-secondary" onclick="fileSearch()">🔍 Advanced Search</button>
                    <button class="btn btn-small btn-success" onclick="fileUpload()">📤 Upload</button>
                </div>
            </h2>
            
            <div class="filter-bar">
                <div class="filter-chip active" data-filter="all">All Files</div>
                <div class="filter-chip" data-filter="recent">Recent</div>
                <div class="filter-chip" data-filter="favorites">⭐ Favorites</div>
                <div class="filter-chip" data-filter="shared">👥 Shared</div>
            </div>


            <div class="form-row">
                <div class="form-group">
                    <label for="file-name">File Name</label>
                    <input type="text" id="file-name" placeholder="Enter file name">
                </div>
                <div class="form-group">
                    <label for="file-category">Category</label>
                    <select id="file-category">
                        <option value="documents">📄 Documents</option>
                        <option value="images">🖼️ Images</option>
                        <option value="videos">🎥 Videos</option>
                        <option value="audio">🎵 Audio</option>
                        <option value="projects">📁 Projects</option>
                        <option value="personal">👤 Personal</option>
                        <option value="work">💼 Work</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="file-location">Location/Path</label>
                    <input type="text" id="file-location" placeholder="/Users/Documents/...">
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="file-tags">Smart Tags</label>
                    <input type="text" id="file-tags" placeholder="comma, separated, tags">
                </div>
                <div class="form-group">
                    <label for="file-size">File Size</label>
                    <input type="text" id="file-size" placeholder="2.5 MB">
                </div>
            </div>
            
            <div class="form-group">
                <label for="file-description">Description & Notes</label>
                <textarea id="file-description" rows="3" placeholder="File description, project context, or notes..."></textarea>
            </div>


            <div class="form-group">
                <label>
                    <input type="checkbox" id="file-favorite"> ⭐ Mark as favorite
                </label>
            </div>
            
            <button class="btn" onclick="addFileReference()">📁 Add File Reference</button>
            
            <div class="items-grid" id="files-list"></div>
        </div>


        <!-- Enhanced Pomodoro Panel -->
        <div class="content-panel" id="pomodoro">
            <h2 class="section-title">
                🍅 Advanced Focus Timer
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="linkTask()">🔗 Link Task</button>
                    <button class="btn btn-small btn-secondary" onclick="focusMusic()">🎵 Focus Music</button>
                    <button class="btn btn-small btn-success" onclick="teamPomodoro()">👥 Team Session</button>
                </div>
            </h2>
            
            <div class="pomodoro-timer">
                <div class="timer-mode">
                    <button class="mode-btn active" data-mode="work" onclick="setTimerMode('work')">💼 Work (25 min)</button>
                    <button class="mode-btn" data-mode="break" onclick="setTimerMode('break')">☕ Break (5 min)</button>
                    <button class="mode-btn" data-mode="longbreak" onclick="setTimerMode('longbreak')">🛋️ Long Break (15 min)</button>
                    <button class="mode-btn" data-mode="custom" onclick="setTimerMode('custom')">⚙️ Custom</button>
                </div>


                <div class="form-group" id="custom-timer" style="display: none;">
                    <label for="custom-minutes">Custom Duration (minutes)</label>
                    <input type="number" id="custom-minutes" placeholder="45" min="1" max="120">
                </div>
                
                <div class="circular-progress" id="timer-circle">
                    <div class="timer-display" id="timer-display">25:00</div>
                </div>
                
                <div class="timer-controls">
                    <button class="btn" id="start-btn" onclick="startTimer()">▶️ Start</button>
                    <button class="btn" id="pause-btn" onclick="pauseTimer()" style="display: none;">⏸️ Pause</button>
                    <button class="btn btn-danger" onclick="resetTimer()">🔄 Reset</button>
                    <button class="btn btn-secondary" onclick="skipSession()">⏭️ Skip</button>
                </div>


                <div class="form-group">
                    <label for="current-task">Current Task (Optional)</label>
                    <select id="current-task">
                        <option value="">Select a task to focus on</option>
                    </select>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="sessions-today">0</div>
                        <div class="stat-label">Sessions Today</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="total-sessions">0</div>
                        <div class="stat-label">Total Sessions</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="focus-time-today">0h 0m</div>
                        <div class="stat-label">Focus Time Today</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="current-streak">0</div>
                        <div class="stat-label">Current Streak</div>
                    </div>
                </div>
            </div>
        </div>


        <!-- New Analytics Panel -->
        <div class="content-panel" id="analytics">
            <h2 class="section-title">
                📈 Advanced Analytics & Insights
                <div class="quick-actions">
                    <button class="btn btn-small" onclick="exportReport()">📊 Export Report</button>
                    <button class="btn btn-small btn-secondary" onclick="compareData()">📈 Compare Periods</button>
                    <button class="btn btn-small btn-success" onclick="predictiveAnalytics()">🔮 Predictions</button>
                </div>
            </h2>


            <div class="filter-bar">
                <div class="filter-chip active" data-period="week">This Week</div>
                <div class="filter-chip" data-period="month">This Month</div>
                <div class="filter-chip" data-period="quarter">This Quarter</div>
                <div class="filter-chip" data-period="year">This Year</div>
            </div>


            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">92%</div>
                    <div class="stat-label">Task Completion Rate</div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 92%"></div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">6.2h</div>
                    <div class="stat-label">Avg Daily Focus Time</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">8.5/10</div>
                    <div class="stat-label">Avg Productivity Score</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">$1,247</div>
                    <div class="stat-label">Monthly Expenses</div>
                </div>
            </div>


            <div class="widget-grid">
                <div class="widget">
                    <h3>📊 Productivity Pattern</h3>
                    <div class="analytics-chart">
                        Peak Performance: 10:00 AM - 12:00 PM<br>
                        Most Productive Day: Tuesday<br>
                        Optimal Session Length: 28 minutes
                    </div>
                </div>


                <div class="widget">
                    <h3>💰 Expense Breakdown</h3>
                    <div class="analytics-chart">
                        Food: 35% ($437)<br>
                        Transport: 20% ($249)<br>
                        Entertainment: 15% ($187)<br>
                        Other: 30% ($374)
                    </div>
                </div>


                <div class="widget">
                    <h3>🎯 Goals Progress</h3>
                    <div class="analytics-chart">
                        Daily Exercise: 85% complete<br>
                        Reading Goal: 67% complete<br>
                        Savings Goal: 92% complete
                    </div>
                </div>


                <div class="widget">
                    <h3>❤️ Health Correlations</h3>
                    <div class="analytics-chart">
                        Sleep vs Productivity: +0.73<br>
                        Exercise vs Mood: +0.68<br>
                        Water vs Energy: +0.45
                    </div>
                </div>
            </div>


            <div class="insight-card">
                <h3>🤖 AI Recommendations</h3>
                <div id="ai-recommendations">
                    <p>💡 <strong>Productivity:</strong> Your focus peaks between 10-12 AM. Schedule your most important tasks during this window.</p>
                    <p>💰 <strong>Finance:</strong> Food expenses increased 15% this month. Consider meal prepping on Sundays.</p>
                    <p>🏃‍♂️ <strong>Health:</strong> You exercise more on days when you sleep 7+ hours. Prioritize sleep for better fitness consistency.</p>
                    <p>🎯 <strong>Goals:</strong> You're 23% more likely to complete goals when you break them into daily milestones.</p>
                </div>
            </div>
        </div>
    </div>


    <!-- Floating Action Button -->
    <button class="floating-action" onclick="toggleQuickMenu()">
        ➕
    </button>


    <div class="quick-menu" id="quick-menu">
        <div class="quick-menu-item" onclick="quickAddTask()">➕ Quick Task</div>
        <div class="quick-menu-item" onclick="startPomodoro()">🍅 Start Focus</div>
        <div class="quick-menu-item" onclick="quickNote()">📝 Quick Note</div>
        <div class="quick-menu-item" onclick="logExpense()">💰 Log Expense</div>
        <div class="quick-menu-item" onclick="logMood()">😊 Log Mood</div>
    </div>


    <!-- Voice Control Button -->
    <button class="voice-control" onclick="toggleVoiceControl()" id="voice-btn">
        🎤
    </button>


    <!-- Settings Modal -->
    <div class="modal" id="settings-modal">
        <div class="modal-content">
            <h2>⚙️ Settings & Customization</h2>
            
            <h3>🎨 Theme Selection</h3>
            <div class="theme-picker">
                <div class="theme-option theme-default active" data-theme="default"></div>
                <div class="theme-option theme-ocean" data-theme="ocean"></div>
                <div class="theme-option theme-sunset" data-theme="sunset"></div>
                <div class="theme-option theme-forest" data-theme="forest"></div>
            </div>


            <h3>🔔 Notification Settings</h3>